{"version":3,"sources":["shared/TextEditor.js"],"names":["counterPlugin","createCounterPlugin","CharCounter","WordCounter","CustomCounter","plugins","StyleButton","onToggle","e","preventDefault","_this","props","style","toolbarItem","classNames","active","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onClick","label","Component","styleTypes","initial","InlineStyleControls","currentStyle","editorState","getCurrentInlineStyle","condensed","map","type","key","has","noBorder","tempStyles","padding","border","TextEditor","_this2","Object","_Users_jmhudak_lab_anni_project_manager_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_jmhudak_lab_anni_project_manager_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_jmhudak_lab_anni_project_manager_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","focus","refs","editor","onChange","setState","save","contentState","state","getCurrentContent","editorContentRaw","convertToRaw","textEditorContent","toggleBlockType","blockType","RichUtils","toggleInlineStyle","inlineStyle","handleKeyCommand","command","newState","displayContextualMenu","selectedText","getVisibleSelectionRect","window","toolbar","getBoundingClientRect","toolbarParent","width","styles","opacity","left","top","visibility","hideContextualMenu","EditorState","createWithContent","convertFromRaw","createEmpty","str","wordArray","match","Date","length","toUTCString","_this3","ref","draft_js_plugins_editor__WEBPACK_IMPORTED_MODULE_7___default","placeholder","spellCheck","background","countFunction","averageReadingTime","defaultProps"],"mappings":"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","file":"static/js/4.9dd8b004.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\n\nimport Editor from 'draft-js-plugins-editor';\nimport {\n  EditorState,\n  RichUtils,\n  getVisibleSelectionRect,\n  convertToRaw,\n  convertFromRaw,\n} from 'draft-js';\nimport createCounterPlugin from 'draft-js-counter-plugin';\n\nconst counterPlugin = createCounterPlugin();\nconst { CharCounter, WordCounter, CustomCounter } = counterPlugin;\nconst plugins = [counterPlugin];\n\nclass StyleButton extends Component {\n  onToggle = e => {\n    e.preventDefault();\n    this.props.onToggle(this.props.style);\n  };\n\n  render() {\n    const toolbarItem = classNames({\n      toolbarItem: true,\n      active: this.props.active,\n    });\n\n    return (\n      <button className={toolbarItem} onClick={this.onToggle}>\n        {this.props.label}\n      </button>\n    );\n  }\n}\n\nconst styleTypes = [\n  { initial: 'B', label: 'Bold', style: 'BOLD' },\n  { initial: 'I', label: 'Italic', style: 'ITALIC' },\n  { initial: 'U', label: 'Underline', style: 'UNDERLINE' },\n  { initial: 'S', label: 'Strikethrough', style: 'STRIKETHROUGH' },\n];\n\nconst InlineStyleControls = props => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n  const { condensed } = props;\n\n  return (\n    <div>\n      <h3>Text styles</h3>\n      <ul>\n        {styleTypes.map(type => (\n          <li key={type.label}>\n            <StyleButton\n              active={currentStyle.has(type.style)}\n              label={condensed ? type.initial : type.label}\n              onToggle={props.onToggle}\n              style={type.style}\n              noBorder\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst tempStyles = {\n  padding: 16,\n  border: '2px solid limegreen',\n};\n\nexport default class TextEditor extends Component {\n  static defaultProps = {\n    save: () => null,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { textEditorContent } = this.props;\n    this.state = {\n      editorState: textEditorContent\n        ? EditorState.createWithContent(convertFromRaw(textEditorContent))\n        : EditorState.createEmpty(),\n    };\n  }\n\n  focus = () => this.refs.editor.focus();\n\n  onChange = editorState => {\n    this.setState({ editorState });\n  };\n\n  save = () => {\n    // export data to a raw format and save to database\n    const contentState = this.state.editorState.getCurrentContent();\n    const editorContentRaw = convertToRaw(contentState);\n    this.props.save({ textEditorContent: editorContentRaw });\n  };\n\n  toggleBlockType = blockType => {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  };\n\n  toggleInlineStyle = inlineStyle => {\n    this.onChange(\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\n    );\n  };\n\n  handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  };\n\n  displayContextualMenu = () => {\n    const selectedText = getVisibleSelectionRect(window);\n    const toolbar = this.toolbar.getBoundingClientRect();\n    const toolbarParent = this.toolbarParent.getBoundingClientRect();\n\n    if (selectedText !== null && selectedText.width > 1) {\n      this.setState({\n        styles: {\n          opacity: 1,\n          left:\n            selectedText.left -\n            toolbarParent.left -\n            toolbar['width'] / 2 +\n            selectedText.width / 2,\n          top: selectedText.top - toolbarParent.top - toolbar['height'] * 1.25,\n          visibility: 'visible',\n        },\n      });\n    } else {\n      this.hideContextualMenu();\n    }\n  };\n\n  hideContextualMenu = () => {\n    this.setState({ styles: { opacity: 0, visibility: 'hidden' } });\n  };\n\n  averageReadingTime(str) {\n    const wordArray = str.match(/\\S+/g); // matches words according to whitespace\n    return wordArray\n      ? new Date((wordArray.length / 3) * 1000)\n          .toUTCString()\n          .match(/(\\d\\d:\\d\\d:\\d\\d)/)[0]\n      : '00:00:00';\n  }\n\n  render() {\n    const { editorState } = this.state;\n\n    // disabling toolbar for now\n    // const toolbar = (\n    //   <div style={styles} ref={ref => (this.toolbar = ref)}>\n    //       <InlineStyleControls\n    //         condensed\n    //         editorState={editorState}\n    //         onToggle={this.toggleInlineStyle}\n    //       />\n    //     </div>\n    // );\n\n    return (\n      <div ref={ref => (this.toolbarParent = ref)} style={tempStyles}>\n        <div\n          // disabled - onMouseUp={this.displayContextualMenu}\n          onClick={this.focus}\n        >\n          <div>\n            <Editor\n              editorState={editorState}\n              handleKeyCommand={this.handleKeyCommand}\n              onChange={this.onChange}\n              onClick={this.focus}\n              placeholder=\"Start writing here...\"\n              plugins={plugins}\n              ref=\"editor\"\n              spellCheck={true}\n            />\n            <button\n              onClick={this.save}\n              style={{\n                padding: 4,\n                background: 'limegreen',\n              }}\n            >\n              Save\n            </button>\n          </div>\n        </div>\n        <div>\n          <InlineStyleControls\n            editorState={editorState}\n            onToggle={this.toggleInlineStyle}\n          />\n          <ul>\n            <li>\n              <CharCounter /> characters\n            </li>\n            <li>\n              <WordCounter /> words\n            </li>\n            <li>\n              Reading time{' '}\n              <CustomCounter countFunction={this.averageReadingTime} />\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}