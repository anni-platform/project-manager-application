{"version":3,"sources":["shared/project.js","shared/index.js","Providers.js","utils/routing.js","dashboard/index.js","test/ids.js","NotFound.js","project/ProjectSection.js","project/ProjectOverview.js","shared/SortableList.js","project/ProjectSectionForm.js","project/ProjectSettings.js","project/index.js","test/fixtures.js","App.js","shared/Loader.js","serviceWorker.js","index.js"],"names":["SECTION_TYPES","SECTION_SUB_TYPES","SECTION_CONFIG","_SECTION_CONFIG","Object","defineProperty","SECTION_TYPE_NAMES","_SECTION_TYPE_NAMES","SECTION_SUB_TYPE_NAMES","_SECTION_SUB_TYPE_NAM","projectSectionTypes","PropTypes","oneOf","projectSectionSubTypes","projectSectionShape","shape","id","string","name","type","isRequired","subtype","projectMessages","sections","arrayOf","overviewLink","PROJECT_SECTIONS_DEFAULT","slugify","key","PROJECTS_STORE_KEY","concat","DEFAULT_PROJECTS_STORE","getProjects","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","store","wrap","_context","prev","next","localForage","getItem","sent","setItem","abrupt","t0","stop","apply","this","arguments","saveProjects","projects","createDropboxProvider","clientId","DropboxProvider","DropboxContext","useDropboxClient","Providers","children","react_default","createElement","makeRoutePath","path","basePath","process","messages","projectNameLabel","projectNamePlaceholder","noProjects","createProject","removeProject","removeProjectAriaLabel","errorProjectNameTaken","generateRemoveButtonAriaLabel","replace","ProjectCard","es","to","aria-label","onClick","projectNameErrorId","ProjectForm","_ref2","addProject","validateProject","_useState","useState","_useState2","slicedToArray","value","setValue","_useState3","_useState4","projectNameError","setProjectNameError","onSubmit","e","preventDefault","projectData","validationResult","htmlFor","aria-describedby","aria-invalid","className","placeholder","onChange","target","style","color","message","Dashboard","_ref3","setProjects","filter","project","length","map","assign","toConsumableArray","_ref4","find","p","PROJECT_SECTION","PROJECT_SECTION_NAV","NotFound","ProjectSection","data-testid","ProjectOverview","details","DragHandle","SortableHandle","SortableItem","SortableElement","_ref$renderItem","renderItem","SortableList","SortableContainer","items","restProps","objectWithoutProperties","index","demoItems","SortableDragHandleList","_ref3$defaultItems","defaultItems","_ref3$onReorder","onReorder","setItems","useEffect","newItems","difference","onSortEnd","oldIndex","newIndex","arrayMove","useDragHandle","newProjectSectionNameLabel","newProjectSectionNamePlaceholder","saveNewProjectSectionButtonLabel","NAME_SECTION_TYPE","NAME_SECTION_SUB_TYPE","initialState","isTypeSelected","state","isSubTypeSelected","reducer","oldState","newState","objectSpread","ProjectSectionForm","saveNewSection","_useReducer","useReducer","_useReducer2","setState","setSubType","entries","subtypes","checked","Array","isArray","setType","cancel","saveChanges","ProjectSettings","updateProject","toggleEditing","projectState","updateProjectState","newSection","getProjectbyId","createSelector","props","projectId","Project","isEditingSections","setEditingSections","src_NotFound","projectNavigation","projectSettings","default","section","defaultProps","lastProjectsState","split","toUpperCase","Loader","Home","AccountNav","_useDropboxClient","client","authUrl","logout","userInfo","setUserInfo","usersGetCurrentAccount","then","familiar_name","borderRadius","with","height","src","profile_photo_url","alt","display_name","shared_Loader","href","App","_ref$defaultProjects","defaultProjects","demoProjects","debugState","setDebugState","updateDatabase","_useState5","_useState6","isEqual","data","App_Home","projectUpdate","padding","background","float","JSON","stringify","Boolean","window","location","hostname","match","rootEl","document","getElementById","PresentationPanel","LandingPage","ReactDOM","render","_useDropboxClient2","readDatabase","database","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c456e786.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport localForage from 'localforage';\nimport PropTypes from 'prop-types';\nimport slugify from '@sindresorhus/slugify';\nimport { useDropboxClient } from '.';\n\nexport const TYPE_IMAGE_COLLECTION = 'imageCollection';\nexport const TYPE_PROSE = 'prose';\nexport const TYPE_MOTION = 'motion';\n\nexport const SUBTYPE_MOOD_BOARD = 'moodBoard';\nexport const SUBTYPE_STORY_BOARD = 'storyBoard';\nexport const SUBTYPE_STYLE_FRAMES = 'styleFrames';\n\nexport const SECTION_TYPES = [TYPE_IMAGE_COLLECTION, TYPE_PROSE, TYPE_MOTION];\nexport const SECTION_SUB_TYPES = [\n  SUBTYPE_MOOD_BOARD,\n  SUBTYPE_STORY_BOARD,\n  SUBTYPE_STYLE_FRAMES,\n];\nexport const SECTION_CONFIG = {\n  [TYPE_PROSE]: TYPE_PROSE,\n  [TYPE_MOTION]: TYPE_MOTION,\n  [TYPE_IMAGE_COLLECTION]: [\n    SUBTYPE_MOOD_BOARD,\n    SUBTYPE_STORY_BOARD,\n    SUBTYPE_STYLE_FRAMES,\n  ],\n};\n\nexport const DEFAULT_PROSE_NAME = 'Script';\nexport const DEFAULT_IMAGE_COLLECTION_NAME = 'Image collection';\nexport const DEFAULT_MOOD_BOARD_NAME = 'Mood board';\nexport const DEFAULT_STORY_BOARD_NAME = 'Story board';\nexport const DEFAULT_STYLE_FRAMES_NAME = 'Style frames';\nexport const DEFAULT_MOTION_NAME = 'Animation';\n\nexport const SECTION_TYPE_NAMES = {\n  [TYPE_IMAGE_COLLECTION]: DEFAULT_IMAGE_COLLECTION_NAME,\n  [TYPE_PROSE]: DEFAULT_PROSE_NAME,\n  [TYPE_MOTION]: DEFAULT_MOTION_NAME,\n};\n\nexport const SECTION_SUB_TYPE_NAMES = {\n  [SUBTYPE_MOOD_BOARD]: DEFAULT_MOOD_BOARD_NAME,\n  [SUBTYPE_STORY_BOARD]: DEFAULT_STORY_BOARD_NAME,\n  [SUBTYPE_STYLE_FRAMES]: DEFAULT_STYLE_FRAMES_NAME,\n};\n\nexport const projectSectionTypes = PropTypes.oneOf(SECTION_TYPES);\nexport const projectSectionSubTypes = PropTypes.oneOf(SECTION_SUB_TYPES);\n\nexport const projectSectionShape = PropTypes.shape({\n  id: PropTypes.string,\n  name: PropTypes.string,\n  type: projectSectionTypes.isRequired,\n  subtype: projectSectionSubTypes,\n});\n\nexport const projectShape = PropTypes.shape({\n  name: PropTypes.string,\n  sections: PropTypes.arrayOf(projectSectionShape),\n});\n\nexport const projectMessages = {\n  overviewLink: 'Overview',\n};\n\nexport const PROJECT_SECTIONS_DEFAULT = [\n  {\n    id: slugify(DEFAULT_PROSE_NAME),\n    name: DEFAULT_PROSE_NAME,\n    type: TYPE_PROSE,\n  },\n  {\n    id: slugify(DEFAULT_MOOD_BOARD_NAME),\n    name: DEFAULT_MOOD_BOARD_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_MOOD_BOARD,\n  },\n  {\n    id: slugify(DEFAULT_STORY_BOARD_NAME),\n    name: DEFAULT_STORY_BOARD_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_STORY_BOARD,\n  },\n  {\n    id: slugify(DEFAULT_STYLE_FRAMES_NAME),\n    name: DEFAULT_STYLE_FRAMES_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_STYLE_FRAMES,\n  },\n  {\n    id: slugify(DEFAULT_MOTION_NAME),\n    name: DEFAULT_MOTION_NAME,\n    type: TYPE_MOTION,\n  },\n];\n\nexport function createProjectWithDefaults(name) {\n  return {\n    id: slugify(name),\n    name,\n    sections: PROJECT_SECTIONS_DEFAULT,\n  };\n}\n\nconst NAMESPACE = 'anni-pma-';\nconst prefixKey = key => `${NAMESPACE}${key}`;\nconst PROJECTS_STORE_KEY = prefixKey('projects');\nconst DEFAULT_PROJECTS_STORE = [];\n\nexport const getProjects = async () => {\n  try {\n    const store = await localForage.getItem(PROJECTS_STORE_KEY);\n    if (!store) {\n      await localForage.setItem(PROJECTS_STORE_KEY, DEFAULT_PROJECTS_STORE);\n      return DEFAULT_PROJECTS_STORE;\n    }\n    return store;\n  } catch (e) {}\n};\n\nexport function saveProjects(projects) {\n  if (projects) {\n    return localForage.setItem(PROJECTS_STORE_KEY, projects);\n  }\n}\n\nfunction updateProjectById(projects, projectUpdate) {\n  return projects.map(project => {\n    if (project.id === projectUpdate.id) {\n      return {\n        ...project,\n        ...projectUpdate,\n      };\n    }\n    return project;\n  });\n}\n\nlet lastProjectsState;\n\nexport function useProjectManager(defaultProjects) {\n  const { updateDatabase } = useDropboxClient();\n  const [projects, setProjects] = useState(defaultProjects);\n\n  function updateProject(projectUpdate) {\n    setProjects(updateProjectById(projectUpdate));\n  }\n\n  useEffect(() => {\n    if (!isEqual(lastProjectsState, projects)) {\n      saveProjects(projects);\n      updateDatabase({ data: { projects } });\n      lastProjectsState = projects;\n    }\n  });\n\n  return {\n    updateProject,\n  };\n}\n","import createDropboxProvider from 'dbdbdb-provider';\n\nexport * from './project';\n\nexport const {\n  DropboxContext,\n  DropboxProvider,\n  useDropboxClient,\n} = createDropboxProvider({\n  clientId: 'swbiv6r9kwfs4os',\n});\n","import React from 'react';\nimport { DropboxProvider } from 'shared';\n\nexport default function Providers({ children }) {\n  return <DropboxProvider>{children}</DropboxProvider>;\n}\n","export const makeRoutePath = path => {\n  const basePath = process.env.PUBLIC_URL;\n\n  if (path === '/') {\n    return `${basePath}/`;\n  }\n\n  return `${basePath}/${path}/`;\n};\n","import React, { useState } from 'react';\nimport { Link } from '@reach/router';\nimport { makeRoutePath } from 'utils/routing';\nimport { createProjectWithDefaults } from 'shared';\n\nexport const messages = {\n  projectNameLabel: 'Project name',\n  projectNamePlaceholder: 'Project B',\n  noProjects: 'No projects',\n  createProject: 'Create project',\n  removeProject: 'Remove project',\n  removeProjectAriaLabel: 'Remove {name} project',\n  errorProjectNameTaken: 'Sorry, that project name is already taken.',\n};\n\nexport const generateRemoveButtonAriaLabel = name =>\n  messages.removeProjectAriaLabel.replace(/\\{.*?\\}/, name);\n\nfunction ProjectCard({ id, name, removeProject }) {\n  return (\n    <div>\n      <h3>\n        <Link to={makeRoutePath(id)}>{name}</Link>\n      </h3>\n      <button\n        aria-label={generateRemoveButtonAriaLabel(name)}\n        onClick={() => removeProject(name)}\n      >\n        {messages.removeProject}\n      </button>\n    </div>\n  );\n}\n\nconst projectNameErrorId = 'projectNameErrorId';\nfunction ProjectForm({ addProject, validateProject }) {\n  const [value, setValue] = useState('');\n  const [projectNameError, setProjectNameError] = useState(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    const projectData = createProjectWithDefaults(value);\n    const validationResult = validateProject(projectData);\n    if (validationResult === null) {\n      addProject(projectData);\n      setValue('');\n    } else {\n      setProjectNameError(validationResult);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"projectName\">\n        {messages.projectNameLabel}\n        <input\n          aria-describedby={projectNameError && projectNameErrorId}\n          aria-invalid={!!projectNameError ? true : null}\n          id=\"projectName\"\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.projectNamePlaceholder}\n          value={value}\n          onChange={e => {\n            setProjectNameError(null);\n            setValue(e.target.value);\n          }}\n        />\n      </label>\n      {projectNameError && (\n        <p style={{ color: 'magenta' }} id={projectNameErrorId}>\n          {projectNameError.message}\n        </p>\n      )}\n      <button type=\"submit\">{messages.createProject}</button>\n    </form>\n  );\n}\n\nexport default function Dashboard({ projects, setProjects }) {\n  const addProject = project => setProjects([...projects, project]);\n  const removeProject = name =>\n    setProjects(projects.filter(project => project.name !== name));\n\n  function validateProject({ name }) {\n    if (projects.find(p => p.name === name)) {\n      return {\n        message: messages.errorProjectNameTaken,\n      };\n    }\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>Projects</h2>\n      {projects.length === 0 && <p>{messages.noProjects}</p>}\n      {projects.map(project => (\n        <ProjectCard\n          {...project}\n          key={project.name}\n          removeProject={removeProject}\n        />\n      ))}\n      <ProjectForm addProject={addProject} validateProject={validateProject} />\n    </div>\n  );\n}\n","export const PROJECT_SECTION = 'PROJECT_SECTION';\nexport const PROJECT_SECTION_NAV = 'PROJECT_SECTION_NAV';\n","import React from 'react';\n\nexport const messages = {\n  title: '404 - Page not found',\n};\nexport const NotFound = () => (\n  <div>\n    <h1>{messages.title}</h1>\n  </div>\n);\nexport default NotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  projectSectionTypes,\n  projectSectionSubTypes,\n  projectShape,\n} from 'shared';\nimport { PROJECT_SECTION } from 'test/ids';\n\nexport default function ProjectSection({ name, project, subtype, type }) {\n  return (\n    <div data-testid={PROJECT_SECTION}>\n      <h1>\n        {project.name} - {name}\n      </h1>\n      {type}\n      {subtype && ` - ${subtype}`}\n    </div>\n  );\n}\n\nProjectSection.propTypes = {\n  name: PropTypes.string,\n  project: projectShape,\n  subtype: projectSectionSubTypes,\n  type: projectSectionTypes,\n};\n","import React from 'react';\nimport { PROJECT_SECTION } from 'test/ids';\nimport { projectShape } from 'shared';\n\nexport default function ProjectOverview({ project }) {\n  return (\n    <div data-testid={PROJECT_SECTION}>\n      <h1>{project.name}</h1>\n      <p>{project.details}</p>\n    </div>\n  );\n}\n\nProjectOverview.propTypes = {\n  project: projectShape,\n};\n","import React, { useState, useEffect } from 'react';\nimport difference from 'lodash/difference';\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n  arrayMove,\n} from 'react-sortable-hoc';\n\nconst DragHandle = SortableHandle(() => <span>::</span>); // This can be any component you want\n\nconst SortableItem = SortableElement(\n  ({ renderItem = () => 'feed me', value }) => {\n    return (\n      <li>\n        <DragHandle />\n        {typeof value === 'string' ? value : renderItem(value)}\n      </li>\n    );\n  }\n);\n\nconst SortableList = SortableContainer(({ items, ...restProps }) => {\n  return (\n    <ul>\n      {items.map((value, index) => (\n        <SortableItem\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          {...restProps}\n        />\n      ))}\n    </ul>\n  );\n});\n\nconst demoItems = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5', 'Item 6'];\n\nexport default function SortableDragHandleList({\n  defaultItems = demoItems,\n  onReorder = () => null,\n  ...restProps\n}) {\n  const [items, setItems] = useState(defaultItems);\n\n  useEffect(() => {\n    const newItems = difference(defaultItems, items);\n    if (newItems.length > 0) {\n      setItems([...items, ...newItems]);\n    }\n  });\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    const newItems = arrayMove(items, oldIndex, newIndex);\n    onReorder(newItems);\n    setItems(newItems);\n  };\n\n  return (\n    <SortableList\n      {...restProps}\n      items={items}\n      onSortEnd={onSortEnd}\n      useDragHandle={true}\n    />\n  );\n}\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport slugify from '@sindresorhus/slugify';\nimport {\n  projectShape,\n  SECTION_CONFIG,\n  SECTION_TYPE_NAMES,\n  SECTION_SUB_TYPE_NAMES,\n  TYPE_IMAGE_COLLECTION,\n  SUBTYPE_MOOD_BOARD,\n} from 'shared';\n\nexport const messages = {\n  newProjectSectionNameLabel: 'New project section name',\n  newProjectSectionNamePlaceholder: 'Section name',\n  saveNewProjectSectionButtonLabel: 'Add new project section',\n};\n\nexport const NAME_SECTION_TYPE = 'type';\nexport const NAME_SECTION_SUB_TYPE = 'subtype';\nexport const DEFAULT_TYPE = TYPE_IMAGE_COLLECTION;\nexport const DEFAULT_SUB_TYPE = SUBTYPE_MOOD_BOARD;\n\nconst initialState = {\n  name: '',\n  type: DEFAULT_TYPE,\n  subtype: DEFAULT_SUB_TYPE,\n};\n\nconst isTypeSelected = (type, state) => type === state.type;\nconst isSubTypeSelected = (type, state) => type === state.subtype;\n\nconst reducer = (oldState, newState) => ({ ...oldState, ...newState });\n\nexport default function ProjectSectionForm({ saveNewSection }) {\n  const [state, setState] = useReducer(reducer, initialState);\n  const setName = name => setState({ name });\n  const setSubType = subtype => setState({ subtype });\n  const setType = type => {\n    setState({ type });\n    setSubType(\n      Array.isArray(SECTION_CONFIG[type]) ? SECTION_CONFIG[type][0] : null\n    );\n  };\n  function onSubmit(e) {\n    e.preventDefault();\n    saveNewSection({ ...state, id: slugify(state.name) });\n    setState(initialState);\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        {messages.newProjectSectionNameLabel}\n        <input\n          value={state.name}\n          onChange={({ target }) => setName(target.value)}\n          name=\"newProjectSectionName\"\n          placeholder={messages.newProjectSectionNamePlaceholder}\n        />\n      </label>\n      <ul>\n        {Object.entries(SECTION_CONFIG).map(([type, subtypes]) => (\n          <li key={type}>\n            <label>\n              <input\n                checked={isTypeSelected(type, state)}\n                type=\"radio\"\n                name={NAME_SECTION_TYPE}\n                onChange={() => setType(type)}\n                value={type}\n              />\n              {SECTION_TYPE_NAMES[type]}\n            </label>\n            {isTypeSelected(type, state) && Array.isArray(subtypes) && (\n              <ul>\n                {subtypes.map(subtype => (\n                  <li key={subtype}>\n                    <label>\n                      <input\n                        checked={isSubTypeSelected(subtype, state)}\n                        type=\"radio\"\n                        name={NAME_SECTION_SUB_TYPE}\n                        onChange={() => setSubType(subtype)}\n                        value={type}\n                      />\n                      {SECTION_SUB_TYPE_NAMES[subtype]}\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </li>\n        ))}\n      </ul>\n      <button type=\"submit\">{messages.saveNewProjectSectionButtonLabel}</button>\n    </form>\n  );\n}\n\nProjectSectionForm.propTypes = {\n  project: projectShape,\n  saveNewSection: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { projectShape } from 'shared';\nimport SortableList from 'shared/SortableList';\nimport ProjectSectionForm from 'project/ProjectSectionForm';\n\nconst messages = {\n  cancel: 'Cancel',\n  saveChanges: 'Save Changes',\n};\n\nexport default function ProjectSettings({\n  project,\n  updateProject,\n  toggleEditing,\n}) {\n  const [projectState, updateProjectState] = useState(project);\n  const { sections } = projectState;\n  function saveChanges() {\n    updateProject(projectState);\n    toggleEditing();\n  }\n  return (\n    <div>\n      <SortableList\n        defaultItems={sections}\n        onReorder={sections => updateProjectState({ ...project, sections })}\n        renderItem={({ name }) => <strong>{name}</strong>}\n      />\n      <ProjectSectionForm\n        project={projectState}\n        saveNewSection={newSection => {\n          updateProjectState({\n            id: project.id,\n            sections: [...sections, newSection],\n          });\n        }}\n      />\n      <button onClick={saveChanges}>{messages.saveChanges}</button>\n      <button onClick={toggleEditing}>{messages.cancel}</button>\n    </div>\n  );\n}\n\nProjectSettings.propTypes = {\n  project: projectShape,\n  toggleEditing: PropTypes.func.isRequired,\n  updateProject: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { createSelector } from 'reselect';\nimport { Router, Link } from '@reach/router';\nimport { PROJECT_SECTION_NAV } from 'test/ids';\nimport { projectMessages } from 'shared';\nimport NotFound from 'NotFound';\nimport ProjectSection from 'project/ProjectSection';\nimport ProjectOverview from 'project/ProjectOverview';\nimport ProjectSettings from 'project/ProjectSettings';\n\nconst getProjectbyId = createSelector(\n  props => props.projects,\n  props => props.projectId,\n  (projects, projectId) => projects.find(({ id }) => id === projectId)\n);\n\nexport default function Project(props) {\n  const [isEditingSections, setEditingSections] = useState(false);\n  const project = getProjectbyId(props);\n  const { updateProject } = props;\n\n  if (!project) return <NotFound />;\n\n  const projectNavigation = (\n    <ul data-testid={PROJECT_SECTION_NAV}>\n      <li>\n        <Link to=\"./\">{projectMessages.overviewLink}</Link>\n      </li>\n      {project.sections.map(({ id, name }, index) => (\n        <li key={id}>\n          <Link to={id}>{name}</Link>\n        </li>\n      ))}\n      <li>\n        <button onClick={() => setEditingSections(true)}>\n          Edit project sections\n        </button>\n      </li>\n    </ul>\n  );\n\n  const projectSettings = (\n    <ProjectSettings\n      project={project}\n      toggleEditing={() => setEditingSections(false)}\n      updateProject={updateProject}\n    />\n  );\n\n  return (\n    <div>\n      <Router>\n        <ProjectOverview default project={project} />\n        {project.sections.map((section, index) => (\n          <ProjectSection\n            key={section.id}\n            path={section.id}\n            project={project}\n            {...section}\n          />\n        ))}\n      </Router>\n\n      {isEditingSections ? projectSettings : projectNavigation}\n    </div>\n  );\n}\n\nProject.propTypes = {\n  updateProject: PropTypes.func,\n};\n\nProject.defaultProps = {\n  updateProject: () => null,\n};\n","import { PROJECT_SECTIONS_DEFAULT } from 'shared';\n\nexport const projects = 'abce'.split('').map(p => ({\n  id: `project-${p}`,\n  name: `Project ${p.toUpperCase()}`,\n  details: `Details about project ${p.toUpperCase()}`,\n  sections: PROJECT_SECTIONS_DEFAULT,\n}));\n","import React, { useState, useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport Dashboard from 'dashboard';\nimport Project from 'project';\nimport NotFound from 'NotFound';\nimport { Router, Link } from '@reach/router';\nimport { projects as demoProjects } from 'test/fixtures';\nimport { makeRoutePath } from 'utils/routing';\nimport Loader from 'shared/Loader';\nimport { saveProjects, useDropboxClient } from 'shared';\nimport 'App.css';\n\nconst Home = () => <div>Home</div>;\n\nlet lastProjectsState;\n\nfunction AccountNav() {\n  const { client, authUrl, logout } = useDropboxClient();\n  const [userInfo, setUserInfo] = useState(null);\n\n  useEffect(() => {\n    if (client) {\n      client.usersGetCurrentAccount().then(setUserInfo);\n    }\n  }, []);\n\n  if (!client) {\n    return <a href={authUrl}>Login to Dropbox</a>;\n  }\n\n  return userInfo ? (\n    <div>\n      <div>\n        <h2>{userInfo.name.familiar_name}</h2>\n        <img\n          style={{ borderRadius: '50%' }}\n          with={50}\n          height={50}\n          src={userInfo.profile_photo_url}\n          alt={userInfo.name.display_name}\n        />\n        <button onClick={logout}>Logout</button>\n      </div>\n    </div>\n  ) : (\n    <Loader />\n  );\n}\n\nexport default function App({ defaultProjects = demoProjects }) {\n  const [debugState, setDebugState] = useState(false);\n  const { updateDatabase } = useDropboxClient();\n  lastProjectsState = defaultProjects;\n  const [projects, setProjects] = useState(defaultProjects);\n\n  function updateProject(projectUpdate) {\n    setProjects(\n      projects.map(project => {\n        if (project.id === projectUpdate.id) {\n          return {\n            ...project,\n            ...projectUpdate,\n          };\n        }\n        return project;\n      })\n    );\n  }\n\n  useEffect(() => {\n    if (!isEqual(lastProjectsState, projects)) {\n      saveProjects(projects);\n      updateDatabase({ data: { projects } });\n      lastProjectsState = projects;\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <header>\n        Anni Project Manager Application\n        <ul>\n          <li>\n            <Link to={makeRoutePath('/')}>Home</Link>\n          </li>\n          <li>\n            <Link to={makeRoutePath('dashboard')}>Dashboard</Link>\n          </li>\n          <li>\n            <AccountNav />\n          </li>\n        </ul>\n      </header>\n      <Router>\n        <Home path={makeRoutePath('/')} />\n        <Dashboard\n          path={makeRoutePath('dashboard')}\n          projects={projects}\n          setProjects={setProjects}\n        />\n        <Project\n          path={makeRoutePath(':projectId/*')}\n          projects={projects}\n          updateProject={updateProject}\n        />\n        <NotFound default />\n      </Router>\n      <footer\n        style={{\n          padding: '100px 20px',\n          background: 'MintCream',\n          float: 'right',\n        }}\n      >\n        <button onClick={() => setDebugState(!debugState)}>Debug State</button>\n        {debugState && (\n          <pre style={{ background: 'lavender', padding: 10 }}>\n            {JSON.stringify(projects, null, 2)}\n          </pre>\n        )}\n      </footer>\n    </div>\n  );\n}\n","import React from 'react';\n\nconst Loader = () => <div>Loading...</div>;\n\nexport default Loader;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { getProjects, useDropboxClient } from 'shared';\nimport ApplicationProvider from 'Providers';\nimport './index.css';\nimport App from './App';\nimport Loader from 'shared/Loader';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nfunction PresentationPanel({ children }) {\n  return <div className=\"PresentationPanel\">{children}</div>;\n}\n\nfunction LandingPage() {\n  const { authUrl } = useDropboxClient();\n  return (\n    <PresentationPanel>\n      <div>\n        <h1>Anni</h1>\n        <a href={authUrl}>Login with Dropbox</a>\n      </div>\n    </PresentationPanel>\n  );\n}\n\nfunction ApplicationLoader() {\n  const { client, readDatabase } = useDropboxClient();\n  const [projects, setProjects] = useState(null);\n  useEffect(() => {\n    if (client) {\n      readDatabase().then(database => {\n        if (database) {\n          setProjects(database.projects);\n        } else {\n          getProjects().then(setProjects);\n        }\n      });\n    }\n  });\n\n  if (!client) {\n    return <LandingPage />;\n  }\n\n  if (!projects) {\n    return (\n      <PresentationPanel>\n        <Loader />\n      </PresentationPanel>\n    );\n  }\n  return (\n    <ApplicationProvider>\n      <App defaultProjects={projects} />\n    </ApplicationProvider>\n  );\n}\n\nReactDOM.render(\n  <ApplicationProvider>\n    <ApplicationLoader />\n  </ApplicationProvider>,\n  rootEl\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}