{"version":3,"sources":["Dashboard.js","serviceWorker.js","index.js","App.js"],"names":["messages","projectNameLabel","projectNamePlaceholder","noProjects","createProject","removeProject","removeProjectAriaLabel","errorProjectNameTaken","generateRemoveButtonAriaLabel","name","replace","ProjectCard","_ref","react_default","a","createElement","aria-label","onClick","projectNameErrorId","ProjectForm","_ref2","addProject","validateProject","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","projectNameError","setProjectNameError","onSubmit","e","preventDefault","projectData","validationResult","htmlFor","aria-describedby","aria-invalid","id","type","className","placeholder","onChange","target","style","color","message","demoProjects","Dashboard","_ref3","_ref3$defaultProjects","defaultProjects","_useState5","_useState6","projects","setProjects","filter","project","length","map","assign","key","toConsumableArray","concat","_ref4","find","p","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAEaA,EAAW,CACtBC,iBAAkB,eAClBC,uBAAwB,YACxBC,WAAY,cACZC,cAAe,iBACfC,cAAe,iBACfC,uBAAwB,wBACxBC,sBAAuB,8CAGZC,EAAgC,SAAAC,GAAI,OAC/CT,EAASM,uBAAuBI,QAAQ,UAAWD,IAErD,SAASE,EAATC,GAA8C,IAAvBH,EAAuBG,EAAvBH,KAAMJ,EAAiBO,EAAjBP,cAC3B,OACEQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,UACEC,aAAYR,EAA8BC,GAC1CQ,QAAS,kBAAMZ,EAAcI,KAE5BT,EAASK,gBAMlB,IAAMa,EAAqB,qBAC3B,SAASC,EAATC,GAAsD,IAA/BC,EAA+BD,EAA/BC,WAAYC,EAAmBF,EAAnBE,gBAAmBC,EAC1BC,mBAAS,IADiBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7CK,EAD6CH,EAAA,GACtCI,EADsCJ,EAAA,GAAAK,EAEJN,mBAAS,MAFLO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE7CE,EAF6CD,EAAA,GAE3BE,EAF2BF,EAAA,GAmBpD,OACElB,EAAAC,EAAAC,cAAA,QAAMmB,SAhBa,SAAAC,GAEnB,GADAA,EAAEC,iBACGR,EAAL,CACA,IAAMS,EAAc,CAClB5B,KAAMmB,GAEFU,EAAmBhB,EAAgBe,GAChB,OAArBC,GACFjB,EAAWgB,GACXR,EAAS,KAETI,EAAoBK,MAMpBzB,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,eACZvC,EAASC,iBACVY,EAAAC,EAAAC,cAAA,SACEyB,mBAAkBR,GAAoBd,EACtCuB,iBAAgBT,GAA0B,KAC1CU,GAAG,cACHC,KAAK,OACLC,UAAU,QACVC,YAAa7C,EAASE,uBACtB0B,MAAOA,EACPkB,SAAU,SAAAX,GACRF,EAAoB,MACpBJ,EAASM,EAAEY,OAAOnB,WAIvBI,GACCnB,EAAAC,EAAAC,cAAA,KAAGiC,MAAO,CAAEC,MAAO,WAAaP,GAAIxB,GACjCc,EAAiBkB,SAGtBrC,EAAAC,EAAAC,cAAA,UAAQ4B,KAAK,UAAU3C,EAASI,gBAKtC,IAAM+C,EAAe,CACnB,CACE1C,KAAM,aAER,CACEA,KAAM,aAER,CACEA,KAAM,cAIK,SAAS2C,EAATC,GAAuD,IAAAC,EAAAD,EAAlCE,uBAAkC,IAAAD,EAAhBH,EAAgBG,EAAAE,EACpChC,mBAAS+B,GAD2BE,EAAA/B,OAAAC,EAAA,EAAAD,CAAA8B,EAAA,GAC7DE,EAD6DD,EAAA,GACnDE,EADmDF,EAAA,GAI9DpD,EAAgB,SAAAI,GAAI,OACxBkD,EAAYD,EAASE,OAAO,SAAAC,GAAO,OAAIA,EAAQpD,OAASA,MAW1D,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACqB,IAApB2C,EAASI,QAAgBjD,EAAAC,EAAAC,cAAA,SAAIf,EAASG,YACtCuD,EAASK,IAAI,SAAAF,GAAO,OACnBhD,EAAAC,EAAAC,cAACJ,EAADe,OAAAsC,OAAA,GACMH,EADN,CAEEI,IAAKJ,EAAQpD,KACbJ,cAAeA,OAGnBQ,EAAAC,EAAAC,cAACI,EAAD,CAAaE,WAxBE,SAAAwC,GAAO,OAAIF,EAAYjC,OAAAwC,EAAA,EAAAxC,CAAIgC,GAALS,OAAA,CAAeN,MAwBfvC,gBApBzC,SAAA8C,GAAmC,IAAR3D,EAAQ2D,EAAR3D,KACzB,OAAIiD,EAASW,KAAK,SAAAC,GAAC,OAAIA,EAAE7D,OAASA,IACzB,CACLyC,QAASlD,EAASO,uBAGf,SC1FSgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cCHD,WACb,OACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAACqC,EAAD,QDDU,MAAS0B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.932ecfb1.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const messages = {\n  projectNameLabel: 'Project name',\n  projectNamePlaceholder: 'Project B',\n  noProjects: 'No projects',\n  createProject: 'Create project',\n  removeProject: 'Remove project',\n  removeProjectAriaLabel: 'Remove {name} project',\n  errorProjectNameTaken: 'Sorry, that project name is already taken.',\n};\n\nexport const generateRemoveButtonAriaLabel = name =>\n  messages.removeProjectAriaLabel.replace(/\\{.*?\\}/, name);\n\nfunction ProjectCard({ name, removeProject }) {\n  return (\n    <div>\n      <h3>{name}</h3>\n      <button\n        aria-label={generateRemoveButtonAriaLabel(name)}\n        onClick={() => removeProject(name)}\n      >\n        {messages.removeProject}\n      </button>\n    </div>\n  );\n}\n\nconst projectNameErrorId = 'projectNameErrorId';\nfunction ProjectForm({ addProject, validateProject }) {\n  const [value, setValue] = useState('');\n  const [projectNameError, setProjectNameError] = useState(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    const projectData = {\n      name: value,\n    };\n    const validationResult = validateProject(projectData);\n    if (validationResult === null) {\n      addProject(projectData);\n      setValue('');\n    } else {\n      setProjectNameError(validationResult);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"projectName\">\n        {messages.projectNameLabel}\n        <input\n          aria-describedby={projectNameError && projectNameErrorId}\n          aria-invalid={!!projectNameError ? true : null}\n          id=\"projectName\"\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.projectNamePlaceholder}\n          value={value}\n          onChange={e => {\n            setProjectNameError(null);\n            setValue(e.target.value);\n          }}\n        />\n      </label>\n      {projectNameError && (\n        <p style={{ color: 'magenta' }} id={projectNameErrorId}>\n          {projectNameError.message}\n        </p>\n      )}\n      <button type=\"submit\">{messages.createProject}</button>\n    </form>\n  );\n}\n\nconst demoProjects = [\n  {\n    name: 'Project A',\n  },\n  {\n    name: 'Project B',\n  },\n  {\n    name: 'Project C',\n  },\n];\n\nexport default function Dashboard({ defaultProjects = demoProjects }) {\n  const [projects, setProjects] = useState(defaultProjects);\n\n  const addProject = project => setProjects([...projects, project]);\n  const removeProject = name =>\n    setProjects(projects.filter(project => project.name !== name));\n\n  function validateProject({ name }) {\n    if (projects.find(p => p.name === name)) {\n      return {\n        message: messages.errorProjectNameTaken,\n      };\n    }\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>Projects</h2>\n      {projects.length === 0 && <p>{messages.noProjects}</p>}\n      {projects.map(project => (\n        <ProjectCard\n          {...project}\n          key={project.name}\n          removeProject={removeProject}\n        />\n      ))}\n      <ProjectForm addProject={addProject} validateProject={validateProject} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Dashboard from './Dashboard';\n\nexport default function App() {\n  return (\n    <div>\n      <header>Anni Project Manager Application</header>\n      <Dashboard />\n    </div>\n  );\n}\n"],"sourceRoot":""}