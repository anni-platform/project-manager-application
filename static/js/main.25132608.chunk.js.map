{"version":3,"sources":["utils/routing.js","Dashboard.js","test/ids.js","constants/project.js","NotFound.js","project/ProjectSection.js","project/ProjectOverview.js","shared/SortableList.js","project/ProjectSectionForm.js","project/ProjectSettings.js","project/index.js","test/fixtures.js","App.js","serviceWorker.js","index.js"],"names":["makeRoutePath","path","basePath","process","concat","messages","projectNameLabel","projectNamePlaceholder","noProjects","createProject","removeProject","removeProjectAriaLabel","errorProjectNameTaken","generateRemoveButtonAriaLabel","name","replace","ProjectCard","_ref","id","react_default","a","createElement","es","to","aria-label","onClick","projectNameErrorId","ProjectForm","_ref2","addProject","validateProject","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","projectNameError","setProjectNameError","onSubmit","e","preventDefault","projectData","slugify","validationResult","htmlFor","aria-describedby","aria-invalid","type","className","placeholder","onChange","target","style","color","message","Dashboard","_ref3","projects","setProjects","filter","project","length","map","assign","key","toConsumableArray","_ref4","find","p","PROJECT_SECTION","PROJECT_SECTION_NAV","SECTION_TYPES","SECTION_SUB_TYPES","SECTION_CONFIG","_SECTION_CONFIG","defineProperty","SECTION_TYPE_NAMES","_SECTION_TYPE_NAMES","SECTION_SUB_TYPE_NAMES","_SECTION_SUB_TYPE_NAM","projectSectionTypes","PropTypes","oneOf","projectSectionSubTypes","projectSectionShape","shape","string","isRequired","subtype","projectMessages","sections","arrayOf","overviewLink","PROJECT_SECTIONS_DEFAULT","NotFound","ProjectSection","data-testid","ProjectOverview","details","DragHandle","SortableHandle","SortableItem","SortableElement","_ref$renderItem","renderItem","SortableList","SortableContainer","items","restProps","objectWithoutProperties","index","demoItems","SortableDragHandleList","_ref3$defaultItems","defaultItems","_ref3$onReorder","onReorder","setItems","useEffect","newItems","difference","onSortEnd","oldIndex","newIndex","arrayMove","useDragHandle","newProjectSectionNameLabel","newProjectSectionNamePlaceholder","saveNewProjectSectionButtonLabel","NAME_SECTION_TYPE","NAME_SECTION_SUB_TYPE","initialState","isTypeSelected","state","isSubTypeSelected","reducer","oldState","newState","objectSpread","ProjectSectionForm","saveNewSection","_useReducer","useReducer","_useReducer2","setState","entries","subtypes","checked","setType","Array","isArray","setSubType","cancel","saveChanges","ProjectSettings","updateProject","toggleEditing","projectState","updateProjectState","newSection","getProjectbyId","createSelector","props","projectId","Project","isEditingSections","setEditingSections","src_NotFound","projectNavigation","projectSettings","default","section","defaultProps","split","toUpperCase","Home","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","_ref$defaultProjects","defaultProjects","demoProjects","App_Home","projectUpdate","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25132608.chunk.js","sourcesContent":["export const makeRoutePath = path => {\n  const basePath = process.env.PUBLIC_URL;\n\n  if (path === '/') {\n    return `${basePath}/`;\n  }\n\n  return `${basePath}/${path}/`;\n};\n","import React, { useState } from 'react';\nimport { Link } from '@reach/router';\nimport slugify from '@sindresorhus/slugify';\nimport { makeRoutePath } from 'utils/routing';\n\nexport const messages = {\n  projectNameLabel: 'Project name',\n  projectNamePlaceholder: 'Project B',\n  noProjects: 'No projects',\n  createProject: 'Create project',\n  removeProject: 'Remove project',\n  removeProjectAriaLabel: 'Remove {name} project',\n  errorProjectNameTaken: 'Sorry, that project name is already taken.',\n};\n\nexport const generateRemoveButtonAriaLabel = name =>\n  messages.removeProjectAriaLabel.replace(/\\{.*?\\}/, name);\n\nfunction ProjectCard({ id, name, removeProject }) {\n  return (\n    <div>\n      <h3>\n        <Link to={makeRoutePath(id)}>{name}</Link>\n      </h3>\n      <button\n        aria-label={generateRemoveButtonAriaLabel(name)}\n        onClick={() => removeProject(name)}\n      >\n        {messages.removeProject}\n      </button>\n    </div>\n  );\n}\n\nconst projectNameErrorId = 'projectNameErrorId';\nfunction ProjectForm({ addProject, validateProject }) {\n  const [value, setValue] = useState('');\n  const [projectNameError, setProjectNameError] = useState(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    const projectData = {\n      id: slugify(value),\n      name: value,\n    };\n    const validationResult = validateProject(projectData);\n    if (validationResult === null) {\n      addProject(projectData);\n      setValue('');\n    } else {\n      setProjectNameError(validationResult);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"projectName\">\n        {messages.projectNameLabel}\n        <input\n          aria-describedby={projectNameError && projectNameErrorId}\n          aria-invalid={!!projectNameError ? true : null}\n          id=\"projectName\"\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.projectNamePlaceholder}\n          value={value}\n          onChange={e => {\n            setProjectNameError(null);\n            setValue(e.target.value);\n          }}\n        />\n      </label>\n      {projectNameError && (\n        <p style={{ color: 'magenta' }} id={projectNameErrorId}>\n          {projectNameError.message}\n        </p>\n      )}\n      <button type=\"submit\">{messages.createProject}</button>\n    </form>\n  );\n}\n\nexport default function Dashboard({ projects, setProjects }) {\n  const addProject = project => setProjects([...projects, project]);\n  const removeProject = name =>\n    setProjects(projects.filter(project => project.name !== name));\n\n  function validateProject({ name }) {\n    if (projects.find(p => p.name === name)) {\n      return {\n        message: messages.errorProjectNameTaken,\n      };\n    }\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>Projects</h2>\n      {projects.length === 0 && <p>{messages.noProjects}</p>}\n      {projects.map(project => (\n        <ProjectCard\n          {...project}\n          key={project.name}\n          removeProject={removeProject}\n        />\n      ))}\n      <ProjectForm addProject={addProject} validateProject={validateProject} />\n    </div>\n  );\n}\n","export const PROJECT_SECTION = 'PROJECT_SECTION';\nexport const PROJECT_SECTION_NAV = 'PROJECT_SECTION_NAV';\n","import PropTypes from 'prop-types';\nimport slugify from '@sindresorhus/slugify';\n\nexport const TYPE_IMAGE_COLLECTION = 'imageCollection';\nexport const TYPE_PROSE = 'prose';\nexport const TYPE_MOTION = 'motion';\n\nexport const SUBTYPE_MOOD_BOARD = 'moodBoard';\nexport const SUBTYPE_STORY_BOARD = 'storyBoard';\nexport const SUBTYPE_STYLE_FRAMES = 'styleFrames';\n\nexport const SECTION_TYPES = [TYPE_IMAGE_COLLECTION, TYPE_PROSE, TYPE_MOTION];\nexport const SECTION_SUB_TYPES = [\n  SUBTYPE_MOOD_BOARD,\n  SUBTYPE_STORY_BOARD,\n  SUBTYPE_STYLE_FRAMES,\n];\nexport const SECTION_CONFIG = {\n  [TYPE_PROSE]: TYPE_PROSE,\n  [TYPE_MOTION]: TYPE_MOTION,\n  [TYPE_IMAGE_COLLECTION]: [\n    SUBTYPE_MOOD_BOARD,\n    SUBTYPE_STORY_BOARD,\n    SUBTYPE_STYLE_FRAMES,\n  ],\n};\n\nexport const DEFAULT_PROSE_NAME = 'Script';\nexport const DEFAULT_MOOD_BOARD_NAME = 'Mood board';\nexport const DEFAULT_STORY_BOARD_NAME = 'Story board';\nexport const DEFAULT_STYLE_FRAMES_NAME = 'Style frames';\nexport const DEFAULT_MOTION_NAME = 'Animation';\n\nexport const SECTION_TYPE_NAMES = {\n  [TYPE_IMAGE_COLLECTION]: 'Image collection',\n  [TYPE_PROSE]: DEFAULT_PROSE_NAME,\n  [TYPE_MOTION]: DEFAULT_MOTION_NAME,\n};\n\nexport const SECTION_SUB_TYPE_NAMES = {\n  [SUBTYPE_MOOD_BOARD]: DEFAULT_MOOD_BOARD_NAME,\n  [SUBTYPE_STORY_BOARD]: DEFAULT_STORY_BOARD_NAME,\n  [SUBTYPE_STYLE_FRAMES]: DEFAULT_STYLE_FRAMES_NAME,\n};\n\nexport const projectSectionTypes = PropTypes.oneOf(SECTION_TYPES);\nexport const projectSectionSubTypes = PropTypes.oneOf(SECTION_SUB_TYPES);\n\nexport const projectSectionShape = PropTypes.shape({\n  id: PropTypes.string,\n  name: PropTypes.string,\n  type: projectSectionTypes.isRequired,\n  subtype: projectSectionSubTypes,\n});\n\nexport const projectShape = PropTypes.shape({\n  name: PropTypes.string,\n  sections: PropTypes.arrayOf(projectSectionShape),\n});\n\nexport const projectMessages = {\n  overviewLink: 'Overview',\n};\n\nexport const PROJECT_SECTIONS_DEFAULT = [\n  {\n    id: slugify(DEFAULT_PROSE_NAME),\n    name: DEFAULT_PROSE_NAME,\n    type: TYPE_PROSE,\n  },\n  {\n    id: slugify(DEFAULT_MOOD_BOARD_NAME),\n    name: DEFAULT_MOOD_BOARD_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_MOOD_BOARD,\n  },\n  {\n    id: slugify(DEFAULT_STORY_BOARD_NAME),\n    name: DEFAULT_STORY_BOARD_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_STORY_BOARD,\n  },\n  {\n    id: slugify(DEFAULT_STYLE_FRAMES_NAME),\n    name: DEFAULT_STYLE_FRAMES_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_STYLE_FRAMES,\n  },\n  {\n    id: slugify(DEFAULT_MOTION_NAME),\n    name: DEFAULT_MOTION_NAME,\n    type: TYPE_MOTION,\n  },\n];\n","import React from 'react';\n\nexport const messages = {\n  title: '404 - Page not found',\n};\nexport const NotFound = () => (\n  <div>\n    <h1>{messages.title}</h1>\n  </div>\n);\nexport default NotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  projectSectionTypes,\n  projectSectionSubTypes,\n  projectShape,\n} from 'constants/project';\nimport { PROJECT_SECTION } from 'test/ids';\n\nexport default function ProjectSection({ name, project, subtype, type }) {\n  return (\n    <div data-testid={PROJECT_SECTION}>\n      <h1>\n        {project.name} - {name}\n      </h1>\n      {type}\n      {subtype && ` - ${subtype}`}\n    </div>\n  );\n}\n\nProjectSection.propTypes = {\n  name: PropTypes.string,\n  project: projectShape,\n  subtype: projectSectionSubTypes,\n  type: projectSectionTypes,\n};\n","import React from 'react';\nimport { PROJECT_SECTION } from 'test/ids';\nimport { projectShape } from 'constants/project';\n\nexport default function ProjectOverview({ project }) {\n  return (\n    <div data-testid={PROJECT_SECTION}>\n      <h1>{project.name}</h1>\n      <p>{project.details}</p>\n    </div>\n  );\n}\n\nProjectOverview.propTypes = {\n  project: projectShape,\n};\n","import React, { useState, useEffect } from 'react';\nimport difference from 'lodash/difference';\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n  arrayMove,\n} from 'react-sortable-hoc';\n\nconst DragHandle = SortableHandle(() => <span>::</span>); // This can be any component you want\n\nconst SortableItem = SortableElement(\n  ({ renderItem = () => 'feed me', value }) => {\n    return (\n      <li>\n        <DragHandle />\n        {typeof value === 'string' ? value : renderItem(value)}\n      </li>\n    );\n  }\n);\n\nconst SortableList = SortableContainer(({ items, ...restProps }) => {\n  return (\n    <ul>\n      {items.map((value, index) => (\n        <SortableItem\n          key={`item-${index}`}\n          index={index}\n          value={value}\n          {...restProps}\n        />\n      ))}\n    </ul>\n  );\n});\n\nconst demoItems = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5', 'Item 6'];\n\nexport default function SortableDragHandleList({\n  defaultItems = demoItems,\n  onReorder = () => null,\n  ...restProps\n}) {\n  const [items, setItems] = useState(defaultItems);\n\n  useEffect(() => {\n    const newItems = difference(defaultItems, items);\n    if (newItems.length > 0) {\n      setItems([...items, ...newItems]);\n    }\n  });\n\n  const onSortEnd = ({ oldIndex, newIndex }) => {\n    const newItems = arrayMove(items, oldIndex, newIndex);\n    onReorder(newItems);\n    setItems(newItems);\n  };\n\n  return (\n    <SortableList\n      {...restProps}\n      items={items}\n      onSortEnd={onSortEnd}\n      useDragHandle={true}\n    />\n  );\n}\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport slugify from '@sindresorhus/slugify';\nimport {\n  projectShape,\n  SECTION_CONFIG,\n  SECTION_TYPE_NAMES,\n  SECTION_SUB_TYPE_NAMES,\n  TYPE_IMAGE_COLLECTION,\n  SUBTYPE_MOOD_BOARD,\n} from 'constants/project';\n\nexport const messages = {\n  newProjectSectionNameLabel: 'New project section name',\n  newProjectSectionNamePlaceholder: 'Section name',\n  saveNewProjectSectionButtonLabel: 'Add new project section',\n};\n\nconst NAME_SECTION_TYPE = 'type';\nconst NAME_SECTION_SUB_TYPE = 'subtype';\n\nconst initialState = {\n  name: '',\n  type: TYPE_IMAGE_COLLECTION,\n  subtype: SUBTYPE_MOOD_BOARD,\n};\n\nconst isTypeSelected = (type, state) => type === state.type;\nconst isSubTypeSelected = (type, state) => type === state.subtype;\n\nconst reducer = (oldState, newState) => ({ ...oldState, ...newState });\n\nexport default function ProjectSectionForm({ saveNewSection }) {\n  const [state, setState] = useReducer(reducer, initialState);\n  const setName = name => setState({ name });\n  const setType = type => setState({ type });\n  const setSubType = subtype => setState({ subtype });\n  function onSubmit(e) {\n    e.preventDefault();\n    saveNewSection({ ...state, id: slugify(state.name) });\n    setState(initialState);\n  }\n  return (\n    <form onSubmit={onSubmit}>\n      <label>\n        {messages.newProjectSectionNameLabel}\n        <input\n          value={state.name}\n          onChange={({ target }) => setName(target.value)}\n          name=\"newProjectSectionName\"\n          placeholder={messages.newProjectSectionNamePlaceholder}\n        />\n      </label>\n      <ul>\n        {Object.entries(SECTION_CONFIG).map(([type, subtypes]) => (\n          <li key={type}>\n            <label>\n              <input\n                checked={isTypeSelected(type, state)}\n                type=\"radio\"\n                name={NAME_SECTION_TYPE}\n                onChange={() => setType(type)}\n                value={type}\n              />\n              {SECTION_TYPE_NAMES[type]}\n            </label>\n            {isTypeSelected(type, state) && Array.isArray(subtypes) && (\n              <ul>\n                {subtypes.map(subtype => (\n                  <li key={subtype}>\n                    <label>\n                      <input\n                        checked={isSubTypeSelected(subtype, state)}\n                        type=\"radio\"\n                        name={NAME_SECTION_SUB_TYPE}\n                        onChange={() => setSubType(subtype)}\n                        value={type}\n                      />\n                      {SECTION_SUB_TYPE_NAMES[subtype]}\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </li>\n        ))}\n      </ul>\n      <button type=\"submit\">{messages.saveNewProjectSectionButtonLabel}</button>\n    </form>\n  );\n}\n\nProjectSectionForm.propTypes = {\n  project: projectShape,\n  saveNewSection: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { projectShape } from 'constants/project';\nimport SortableList from 'shared/SortableList';\nimport ProjectSectionForm from 'project/ProjectSectionForm';\n\nconst messages = {\n  cancel: 'Cancel',\n  saveChanges: 'Save Changes',\n};\n\nexport default function ProjectSettings({\n  project,\n  updateProject,\n  toggleEditing,\n}) {\n  const [projectState, updateProjectState] = useState(project);\n  const { sections } = projectState;\n  function saveChanges() {\n    updateProject(projectState);\n    toggleEditing();\n  }\n  return (\n    <div>\n      <SortableList\n        defaultItems={sections}\n        onReorder={sections => updateProjectState({ ...project, sections })}\n        renderItem={({ name }) => <strong>{name}</strong>}\n      />\n      <ProjectSectionForm\n        project={projectState}\n        saveNewSection={newSection => {\n          updateProjectState({\n            id: project.id,\n            sections: [...sections, newSection],\n          });\n        }}\n      />\n      <button onClick={saveChanges}>{messages.saveChanges}</button>\n      <button onClick={toggleEditing}>{messages.cancel}</button>\n    </div>\n  );\n}\n\nProjectSettings.propTypes = {\n  project: projectShape,\n  toggleEditing: PropTypes.func.isRequired,\n  updateProject: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { createSelector } from 'reselect';\nimport { Router, Link } from '@reach/router';\nimport { PROJECT_SECTION_NAV } from 'test/ids';\nimport { projectMessages } from 'constants/project';\nimport NotFound from 'NotFound';\nimport ProjectSection from 'project/ProjectSection';\nimport ProjectOverview from 'project/ProjectOverview';\nimport ProjectSettings from 'project/ProjectSettings';\n\nconst getProjectbyId = createSelector(\n  props => props.projects,\n  props => props.projectId,\n  (projects, projectId) => projects.find(({ id }) => id === projectId)\n);\n\nexport default function Project(props) {\n  const [isEditingSections, setEditingSections] = useState(false);\n  const project = getProjectbyId(props);\n  const { updateProject } = props;\n\n  if (!project) return <NotFound />;\n\n  const projectNavigation = (\n    <ul data-testid={PROJECT_SECTION_NAV}>\n      <li>\n        <Link to=\"./\">{projectMessages.overviewLink}</Link>\n      </li>\n      {project.sections.map(({ id, name }, index) => (\n        <li key={id}>\n          <Link to={id}>{name}</Link>\n        </li>\n      ))}\n      <li>\n        <button onClick={() => setEditingSections(true)}>\n          Edit project sections\n        </button>\n      </li>\n    </ul>\n  );\n\n  const projectSettings = (\n    <ProjectSettings\n      project={project}\n      toggleEditing={() => setEditingSections(false)}\n      updateProject={updateProject}\n    />\n  );\n\n  return (\n    <div>\n      <Router>\n        <ProjectOverview default project={project} />\n        {project.sections.map((section, index) => (\n          <ProjectSection\n            key={section.id}\n            path={section.id}\n            project={project}\n            {...section}\n          />\n        ))}\n      </Router>\n\n      {isEditingSections ? projectSettings : projectNavigation}\n    </div>\n  );\n}\n\nProject.propTypes = {\n  updateProject: PropTypes.func,\n};\n\nProject.defaultProps = {\n  updateProject: () => null,\n};\n","import { PROJECT_SECTIONS_DEFAULT } from 'constants/project';\n\nexport const projects = 'abce'.split('').map(p => ({\n  id: `project-${p}`,\n  name: `Project ${p.toUpperCase()}`,\n  details: `Details about project ${p.toUpperCase()}`,\n  sections: PROJECT_SECTIONS_DEFAULT,\n}));\n","import React, { useState } from 'react';\nimport Dashboard from 'Dashboard';\nimport Project from 'project';\nimport NotFound from 'NotFound';\nimport { Router, Link } from '@reach/router';\nimport { projects as demoProjects } from 'test/fixtures';\nimport { makeRoutePath } from 'utils/routing';\nimport 'App.css';\n\nconst Home = () => <div>Home</div>;\n\nexport default function App({ defaultProjects = demoProjects }) {\n  const [projects, setProjects] = useState(defaultProjects);\n\n  function updateProject(projectUpdate) {\n    setProjects(\n      projects.map(project => {\n        if (project.id === projectUpdate.id) {\n          return {\n            ...project,\n            ...projectUpdate,\n          };\n        }\n        return project;\n      })\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        Anni Project Manager Application\n        <ul>\n          <li>\n            <Link to={makeRoutePath('/')}>Home</Link>\n          </li>\n          <li>\n            <Link to={makeRoutePath('dashboard')}>Dashboard</Link>\n          </li>\n        </ul>\n      </header>\n      <Router>\n        <Home path={makeRoutePath('/')} />\n        <Dashboard\n          path={makeRoutePath('dashboard')}\n          projects={projects}\n          setProjects={setProjects}\n        />\n        <Project\n          path={makeRoutePath(':projectId/*')}\n          projects={projects}\n          updateProject={updateProject}\n        />\n        <NotFound default />\n      </Router>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(<App />, rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}