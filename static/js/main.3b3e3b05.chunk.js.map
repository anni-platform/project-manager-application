{"version":3,"sources":["utils/routing.js","Dashboard.js","test/ids.js","NotFound.js","Project.js","constants/project.js","test/fixtures.js","App.js","serviceWorker.js","index.js"],"names":["makeRoutePath","path","basePath","process","concat","messages","projectNameLabel","projectNamePlaceholder","noProjects","createProject","removeProject","removeProjectAriaLabel","errorProjectNameTaken","generateRemoveButtonAriaLabel","name","replace","ProjectCard","_ref","id","react_default","a","createElement","es","to","aria-label","onClick","projectNameErrorId","ProjectForm","_ref2","addProject","validateProject","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","projectNameError","setProjectNameError","onSubmit","e","preventDefault","projectData","slugify","validationResult","htmlFor","aria-describedby","aria-invalid","type","className","placeholder","onChange","target","style","color","message","Dashboard","_ref3","projects","setProjects","filter","project","length","map","assign","key","toConsumableArray","_ref4","find","p","PROJECT_SECTION_NAV","NotFound","overviewLink","getProjectbyId","createSelector","props","projectId","ProjectOverview","data-testid","details","ProjectSection","subtype","Project","Project_ProjectOverview","default","sections","section","index","Project_ProjectSection","src_NotFound","PROJECT_SECTIONS_DEFAULT","split","toUpperCase","Home","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","_ref$defaultProjects","defaultProjects","demoProjects","App_Home","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b3e3b05.chunk.js","sourcesContent":["export const makeRoutePath = path => {\n  const basePath = process.env.PUBLIC_URL;\n\n  if (path === '/') {\n    return `${basePath}/`;\n  }\n\n  return `${basePath}/${path}/`;\n};\n","import React, { useState } from 'react';\nimport { Link } from '@reach/router';\nimport slugify from '@sindresorhus/slugify';\nimport { makeRoutePath } from 'utils/routing';\n\nexport const messages = {\n  projectNameLabel: 'Project name',\n  projectNamePlaceholder: 'Project B',\n  noProjects: 'No projects',\n  createProject: 'Create project',\n  removeProject: 'Remove project',\n  removeProjectAriaLabel: 'Remove {name} project',\n  errorProjectNameTaken: 'Sorry, that project name is already taken.',\n};\n\nexport const generateRemoveButtonAriaLabel = name =>\n  messages.removeProjectAriaLabel.replace(/\\{.*?\\}/, name);\n\nfunction ProjectCard({ id, name, removeProject }) {\n  return (\n    <div>\n      <h3>\n        <Link to={makeRoutePath(id)}>{name}</Link>\n      </h3>\n      <button\n        aria-label={generateRemoveButtonAriaLabel(name)}\n        onClick={() => removeProject(name)}\n      >\n        {messages.removeProject}\n      </button>\n    </div>\n  );\n}\n\nconst projectNameErrorId = 'projectNameErrorId';\nfunction ProjectForm({ addProject, validateProject }) {\n  const [value, setValue] = useState('');\n  const [projectNameError, setProjectNameError] = useState(null);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    const projectData = {\n      id: slugify(value),\n      name: value,\n    };\n    const validationResult = validateProject(projectData);\n    if (validationResult === null) {\n      addProject(projectData);\n      setValue('');\n    } else {\n      setProjectNameError(validationResult);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"projectName\">\n        {messages.projectNameLabel}\n        <input\n          aria-describedby={projectNameError && projectNameErrorId}\n          aria-invalid={!!projectNameError ? true : null}\n          id=\"projectName\"\n          type=\"text\"\n          className=\"input\"\n          placeholder={messages.projectNamePlaceholder}\n          value={value}\n          onChange={e => {\n            setProjectNameError(null);\n            setValue(e.target.value);\n          }}\n        />\n      </label>\n      {projectNameError && (\n        <p style={{ color: 'magenta' }} id={projectNameErrorId}>\n          {projectNameError.message}\n        </p>\n      )}\n      <button type=\"submit\">{messages.createProject}</button>\n    </form>\n  );\n}\n\nexport default function Dashboard({ projects, setProjects }) {\n  const addProject = project => setProjects([...projects, project]);\n  const removeProject = name =>\n    setProjects(projects.filter(project => project.name !== name));\n\n  function validateProject({ name }) {\n    if (projects.find(p => p.name === name)) {\n      return {\n        message: messages.errorProjectNameTaken,\n      };\n    }\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>Projects</h2>\n      {projects.length === 0 && <p>{messages.noProjects}</p>}\n      {projects.map(project => (\n        <ProjectCard\n          {...project}\n          key={project.name}\n          removeProject={removeProject}\n        />\n      ))}\n      <ProjectForm addProject={addProject} validateProject={validateProject} />\n    </div>\n  );\n}\n","export const PROJECT_SECTION = 'PROJECT_SECTION';\nexport const PROJECT_SECTION_NAV = 'PROJECT_SECTION_NAV';\n","import React from 'react';\n\nexport const messages = {\n  title: '404 - Page not found',\n};\nexport const NotFound = () => (\n  <div>\n    <h1>{messages.title}</h1>\n  </div>\n);\nexport default NotFound;\n","import React from 'react';\nimport { createSelector } from 'reselect';\nimport { Router, Link } from '@reach/router';\nimport { PROJECT_SECTION, PROJECT_SECTION_NAV } from 'test/ids';\nimport NotFound from './NotFound';\n\nconst messages = {\n  overviewLink: 'Overview',\n};\n\nconst getProjectbyId = createSelector(\n  props => props.projects,\n  props => props.projectId,\n  (projects, projectId) => projects.find(({ id }) => id === projectId)\n);\n\nconst ProjectOverview = ({ project }) => (\n  <div data-testid={PROJECT_SECTION}>\n    <h1>{project.name}</h1>\n    <p>{project.details}</p>\n  </div>\n);\n\nconst ProjectSection = ({ name, project, subtype, type }) => (\n  <div data-testid={PROJECT_SECTION}>\n    <h1>\n      {project.name} - {name}\n    </h1>\n    {type}\n    {subtype && ` - ${subtype}`}\n  </div>\n);\n\nexport default function Project(props) {\n  const project = getProjectbyId(props);\n\n  if (project) {\n    return (\n      <div>\n        <Router>\n          <ProjectOverview default project={project} />\n          {project.sections.map((section, index) => (\n            <ProjectSection\n              key={section.id}\n              path={section.id}\n              project={project}\n              {...section}\n            />\n          ))}\n        </Router>\n\n        <ul data-testid={PROJECT_SECTION_NAV}>\n          <li>\n            <Link to=\"./\">{messages.overviewLink}</Link>\n          </li>\n          {project.sections.map(({ id, name }, index) => (\n            <li key={id}>\n              <Link to={id}>{name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n  return <NotFound />;\n}\n","import slugify from '@sindresorhus/slugify';\n\nexport const TYPE_IMAGE_COLLECTION = 'imageCollection';\nexport const TYPE_PROSE = 'prose';\nexport const TYPE_MOTION = 'motion';\n\nexport const SUBTYPE_MOOD_BOARD = 'moodBoard';\nexport const SUBTYPE_STORY_BOARD = 'storyBoard';\nexport const SUBTYPE_STYLE_FRAMES = 'styleFrames';\n\nexport const DEFAULT_PROSE_NAME = 'Script';\nexport const DEFAULT_MOOD_BOARD_NAME = 'Mood board';\nexport const DEFAULT_STORY_BOARD_NAME = 'Story board';\nexport const DEFAULT_STYLE_FRAMES_NAME = 'Style frames';\nexport const DEFAULT_MOTION_NAME = 'Animation';\n\nexport const PROJECT_SECTIONS_DEFAULT = [\n  {\n    id: slugify(DEFAULT_PROSE_NAME),\n    name: DEFAULT_PROSE_NAME,\n    type: TYPE_PROSE,\n  },\n  {\n    id: slugify(DEFAULT_MOOD_BOARD_NAME),\n    name: DEFAULT_MOOD_BOARD_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_MOOD_BOARD,\n  },\n  {\n    id: slugify(DEFAULT_STORY_BOARD_NAME),\n    name: DEFAULT_STORY_BOARD_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_STORY_BOARD,\n  },\n  {\n    id: slugify(DEFAULT_STYLE_FRAMES_NAME),\n    name: DEFAULT_STYLE_FRAMES_NAME,\n    type: TYPE_IMAGE_COLLECTION,\n    subtype: SUBTYPE_STYLE_FRAMES,\n  },\n  {\n    id: slugify(DEFAULT_MOTION_NAME),\n    name: DEFAULT_MOTION_NAME,\n    type: TYPE_MOTION,\n  },\n];\n","import { PROJECT_SECTIONS_DEFAULT } from 'constants/project';\n\nexport const projects = 'abce'.split('').map(p => ({\n  id: `project-${p}`,\n  name: `Project ${p.toUpperCase()}`,\n  details: `Details about project ${p.toUpperCase()}`,\n  sections: PROJECT_SECTIONS_DEFAULT,\n}));\n","import React, { useState } from 'react';\nimport Dashboard from 'Dashboard';\nimport Project from 'Project';\nimport NotFound from 'NotFound';\nimport { Router, Link } from '@reach/router';\nimport { projects as demoProjects } from 'test/fixtures';\nimport { makeRoutePath } from 'utils/routing';\nimport 'App.css';\n\nconst Home = () => <div>Home</div>;\n\nexport default function App({ defaultProjects = demoProjects }) {\n  const [projects, setProjects] = useState(defaultProjects);\n\n  return (\n    <div className=\"App\">\n      <header>\n        Anni Project Manager Application\n        <ul>\n          <li>\n            <Link to={makeRoutePath('/')}>Home</Link>\n          </li>\n          <li>\n            <Link to={makeRoutePath('dashboard')}>Dashboard</Link>\n          </li>\n        </ul>\n      </header>\n      <Router>\n        <Home path={makeRoutePath('/')} />\n        <Dashboard\n          path={makeRoutePath('dashboard')}\n          projects={projects}\n          setProjects={setProjects}\n        />\n        <Project path={makeRoutePath(':projectId/*')} projects={projects} />\n        <NotFound default />\n      </Router>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(<App />, rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}